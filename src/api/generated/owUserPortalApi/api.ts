/* tslint:disable */
/* eslint-disable */
/**
 * OpenWiFi User Portal
 * API describing User Self Care interaction with OpenWifi.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTime
 */
export interface AccessTime {
    /**
     * 
     * @type {string}
     * @memberof AccessTime
     */
    day?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessTime
     */
    rangeList?: Array<string>;
}
/**
 * 
 * @export
 * @interface AccessTimes
 */
export interface AccessTimes {
    /**
     * 
     * @type {Array<AccessTime>}
     * @memberof AccessTimes
     */
    schedule?: Array<AccessTime>;
}
/**
 * 
 * @export
 * @interface Association
 */
export interface Association {
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    macAddress?: string;
    /**
     * 
     * @type {number}
     * @memberof Association
     */
    rssi?: number;
    /**
     * 
     * @type {number}
     * @memberof Association
     */
    power?: number;
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    ipv4?: string;
    /**
     * 
     * @type {number}
     * @memberof Association
     */
    ipv6?: number;
    /**
     * 
     * @type {number}
     * @memberof Association
     */
    tx?: number;
    /**
     * 
     * @type {number}
     * @memberof Association
     */
    rx?: number;
}
/**
 * 
 * @export
 * @interface AssociationList
 */
export interface AssociationList {
    /**
     * 
     * @type {Array<Association>}
     * @memberof AssociationList
     */
    associations?: Array<Association>;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    macAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    speed?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    mode?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    ipv4?: string;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    ipv6?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    tx?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    rx?: number;
}
/**
 * 
 * @export
 * @interface ClientList
 */
export interface ClientList {
    /**
     * 
     * @type {Array<Client>}
     * @memberof ClientList
     */
    clients?: Array<Client>;
}
/**
 * 
 * @export
 * @interface DnsConfiguration
 */
export interface DnsConfiguration {
    /**
     * 
     * @type {boolean}
     * @memberof DnsConfiguration
     */
    ISP?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DnsConfiguration
     */
    custom?: boolean;
    /**
     * 
     * @type {DnsConfigurationCustomSettings}
     * @memberof DnsConfiguration
     */
    customSettings?: DnsConfigurationCustomSettings;
}
/**
 * 
 * @export
 * @interface DnsConfigurationCustomSettings
 */
export interface DnsConfigurationCustomSettings {
    /**
     * 
     * @type {string}
     * @memberof DnsConfigurationCustomSettings
     */
    primary?: string;
    /**
     * 
     * @type {string}
     * @memberof DnsConfigurationCustomSettings
     */
    seconfary?: string;
}
/**
 * 
 * @export
 * @interface HomeDeviceMode
 */
export interface HomeDeviceMode {
    /**
     * 
     * @type {HomeDeviceModeAutomatic | HomeDeviceModeManual | HomeDeviceModeBridge}
     * @memberof HomeDeviceMode
     */
    type?: HomeDeviceModeAutomatic | HomeDeviceModeManual | HomeDeviceModeBridge;
}
/**
 * 
 * @export
 * @interface HomeDeviceModeAutomatic
 */
export interface HomeDeviceModeAutomatic {
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeAutomatic
     */
    type?: HomeDeviceModeAutomaticTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeAutomatic
     */
    subnet?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeAutomatic
     */
    subnetMask?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeAutomatic
     */
    startIP?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeAutomatic
     */
    endIP?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum HomeDeviceModeAutomaticTypeEnum {
    Automatic = 'automatic'
}

/**
 * 
 * @export
 * @interface HomeDeviceModeBridge
 */
export interface HomeDeviceModeBridge {
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeBridge
     */
    type?: HomeDeviceModeBridgeTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum HomeDeviceModeBridgeTypeEnum {
    Bridge = 'bridge'
}

/**
 * 
 * @export
 * @interface HomeDeviceModeManual
 */
export interface HomeDeviceModeManual {
    /**
     * 
     * @type {string}
     * @memberof HomeDeviceModeManual
     */
    type?: HomeDeviceModeManualTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum HomeDeviceModeManualTypeEnum {
    Manual = 'manual'
}

/**
 * 
 * @export
 * @interface IPReservation
 */
export interface IPReservation {
    /**
     * 
     * @type {string}
     * @memberof IPReservation
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof IPReservation
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof IPReservation
     */
    macAddress?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<IPReservation>}
     * @memberof InlineResponse200
     */
    reservations?: Array<IPReservation>;
}
/**
 * 
 * @export
 * @interface InternetConnection
 */
export interface InternetConnection {
    /**
     * 
     * @type {InternetConnectionAutomatic | InternetConnectionPPPoE | InternetConnectionManual}
     * @memberof InternetConnection
     */
    type?: InternetConnectionAutomatic | InternetConnectionPPPoE | InternetConnectionManual;
}
/**
 * 
 * @export
 * @interface InternetConnectionAutomatic
 */
export interface InternetConnectionAutomatic {
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionAutomatic
     */
    connection?: InternetConnectionAutomaticConnectionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InternetConnectionAutomaticConnectionEnum {
    Automatic = 'automatic'
}

/**
 * 
 * @export
 * @interface InternetConnectionManual
 */
export interface InternetConnectionManual {
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionManual
     */
    connection?: InternetConnectionManualConnectionEnum;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionManual
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionManual
     */
    subnetMask?: string;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionManual
     */
    defaultGateway?: string;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionManual
     */
    primaryDns?: string;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionManual
     */
    secondaryDns?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InternetConnectionManualConnectionEnum {
    Manual = 'manual'
}

/**
 * 
 * @export
 * @interface InternetConnectionPPPoE
 */
export interface InternetConnectionPPPoE {
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionPPPoE
     */
    connection?: InternetConnectionPPPoEConnectionEnum;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionPPPoE
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof InternetConnectionPPPoE
     */
    password?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InternetConnectionPPPoEConnectionEnum {
    Pppoe = 'pppoe'
}

/**
 * 
 * @export
 * @interface SubscriberDevice
 */
export interface SubscriberDevice {
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    macAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    manufacturer?: string;
    /**
     * 
     * @type {number}
     * @memberof SubscriberDevice
     */
    firstContact?: number;
    /**
     * 
     * @type {number}
     * @memberof SubscriberDevice
     */
    lastContact?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    group?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    icon?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriberDevice
     */
    suspended?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDevice
     */
    ip?: string;
    /**
     * 
     * @type {AccessTimes}
     * @memberof SubscriberDevice
     */
    schedule?: AccessTimes;
}
/**
 * 
 * @export
 * @interface SubscriberDeviceList
 */
export interface SubscriberDeviceList {
    /**
     * 
     * @type {Array<SubscriberDevice>}
     * @memberof SubscriberDeviceList
     */
    devices?: Array<SubscriberDevice>;
}
/**
 * 
 * @export
 * @interface WifiNetwork
 */
export interface WifiNetwork {
    /**
     * 
     * @type {string}
     * @memberof WifiNetwork
     */
    type?: WifiNetworkTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WifiNetwork
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof WifiNetwork
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof WifiNetwork
     */
    encryption?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WifiNetwork
     */
    band?: Array<WifiNetworkBandEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum WifiNetworkTypeEnum {
    Main = 'main',
    Guest = 'guest'
}
/**
    * @export
    * @enum {string}
    */
export enum WifiNetworkBandEnum {
    _2G = '2G',
    _5G = '5G',
    _5Gl = '5GL',
    _5Gu = '5GU'
}


/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the list of wired clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWifiClients: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wifiClients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of wired clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWiredClients: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wiredClients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the list of wired clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWifiClients(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWifiClients(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the list of wired clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWiredClients(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWiredClients(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the list of wired clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWifiClients(options?: any): AxiosPromise<AssociationList> {
            return localVarFp.getWifiClients(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the list of wired clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWiredClients(options?: any): AxiosPromise<ClientList> {
            return localVarFp.getWiredClients(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @summary Get the list of wired clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getWifiClients(options?: any) {
        return ClientsApiFp(this.configuration).getWifiClients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the list of wired clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getWiredClients(options?: any) {
        return ClientsApiFp(this.configuration).getWiredClients(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Modify the current device mode settings
         * @param {boolean} [reset] 
         * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyHomeDeviceMode: async (reset?: boolean, homeDeviceMode?: HomeDeviceMode, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/homeDeviceMode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reset !== undefined) {
                localVarQueryParameter['reset'] = reset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homeDeviceMode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modify the current internet connection settings
         * @param {boolean} [reset] 
         * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyInternetConnectionSettings: async (reset?: boolean, internetConnection?: InternetConnection, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/internetConnection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reset !== undefined) {
                localVarQueryParameter['reset'] = reset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(internetConnection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Modify the current device mode settings
         * @param {boolean} [reset] 
         * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyHomeDeviceMode(reset?: boolean, homeDeviceMode?: HomeDeviceMode, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyHomeDeviceMode(reset, homeDeviceMode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Modify the current internet connection settings
         * @param {boolean} [reset] 
         * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyInternetConnectionSettings(reset?: boolean, internetConnection?: InternetConnection, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyInternetConnectionSettings(reset, internetConnection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Modify the current device mode settings
         * @param {boolean} [reset] 
         * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyHomeDeviceMode(reset?: boolean, homeDeviceMode?: HomeDeviceMode, options?: any): AxiosPromise<void> {
            return localVarFp.modifyHomeDeviceMode(reset, homeDeviceMode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Modify the current internet connection settings
         * @param {boolean} [reset] 
         * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyInternetConnectionSettings(reset?: boolean, internetConnection?: InternetConnection, options?: any): AxiosPromise<void> {
            return localVarFp.modifyInternetConnectionSettings(reset, internetConnection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Modify the current device mode settings
     * @param {boolean} [reset] 
     * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyHomeDeviceMode(reset?: boolean, homeDeviceMode?: HomeDeviceMode, options?: any) {
        return DefaultApiFp(this.configuration).modifyHomeDeviceMode(reset, homeDeviceMode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Modify the current internet connection settings
     * @param {boolean} [reset] 
     * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyInternetConnectionSettings(reset?: boolean, internetConnection?: InternetConnection, options?: any) {
        return DefaultApiFp(this.configuration).modifyInternetConnectionSettings(reset, internetConnection, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceModeApi - axios parameter creator
 * @export
 */
export const DeviceModeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read the Home Device Mode
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeDeviceMode: async (_default?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/homeDeviceMode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (_default !== undefined) {
                localVarQueryParameter['default'] = _default;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceModeApi - functional programming interface
 * @export
 */
export const DeviceModeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceModeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read the Home Device Mode
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeDeviceMode(_default?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeDeviceMode(_default, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceModeApi - factory interface
 * @export
 */
export const DeviceModeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceModeApiFp(configuration)
    return {
        /**
         * 
         * @summary Read the Home Device Mode
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeDeviceMode(_default?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.getHomeDeviceMode(_default, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceModeApi - object-oriented interface
 * @export
 * @class DeviceModeApi
 * @extends {BaseAPI}
 */
export class DeviceModeApi extends BaseAPI {
    /**
     * 
     * @summary Read the Home Device Mode
     * @param {boolean} [_default] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceModeApi
     */
    public getHomeDeviceMode(_default?: boolean, options?: any) {
        return DeviceModeApiFp(this.configuration).getHomeDeviceMode(_default, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IPReservationsApi - axios parameter creator
 * @export
 */
export const IPReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add A new IP reservation
         * @param {boolean} [replace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIPReservation: async (replace?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ipReservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (replace !== undefined) {
                localVarQueryParameter['replace'] = replace;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an IP Reservation
         * @param {string} [macAddress] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIPReservation: async (macAddress?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ipReservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (macAddress !== undefined) {
                localVarQueryParameter['macAddress'] = macAddress;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retreive the list of IP Reservations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIPReservationList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ipReservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPReservationsApi - functional programming interface
 * @export
 */
export const IPReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IPReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add A new IP reservation
         * @param {boolean} [replace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIPReservation(replace?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPReservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIPReservation(replace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an IP Reservation
         * @param {string} [macAddress] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIPReservation(macAddress?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIPReservation(macAddress, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retreive the list of IP Reservations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIPReservationList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIPReservationList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IPReservationsApi - factory interface
 * @export
 */
export const IPReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IPReservationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add A new IP reservation
         * @param {boolean} [replace] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIPReservation(replace?: boolean, options?: any): AxiosPromise<IPReservation> {
            return localVarFp.addIPReservation(replace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an IP Reservation
         * @param {string} [macAddress] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIPReservation(macAddress?: string, name?: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteIPReservation(macAddress, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retreive the list of IP Reservations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIPReservationList(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getIPReservationList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPReservationsApi - object-oriented interface
 * @export
 * @class IPReservationsApi
 * @extends {BaseAPI}
 */
export class IPReservationsApi extends BaseAPI {
    /**
     * 
     * @summary Add A new IP reservation
     * @param {boolean} [replace] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPReservationsApi
     */
    public addIPReservation(replace?: boolean, options?: any) {
        return IPReservationsApiFp(this.configuration).addIPReservation(replace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an IP Reservation
     * @param {string} [macAddress] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPReservationsApi
     */
    public deleteIPReservation(macAddress?: string, name?: string, options?: any) {
        return IPReservationsApiFp(this.configuration).deleteIPReservation(macAddress, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retreive the list of IP Reservations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPReservationsApi
     */
    public getIPReservationList(options?: any) {
        return IPReservationsApiFp(this.configuration).getIPReservationList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InternetConnectionApi - axios parameter creator
 * @export
 */
export const InternetConnectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read the current internet connection settings
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInternetConnectionSettings: async (_default?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/internetConnection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (_default !== undefined) {
                localVarQueryParameter['default'] = _default;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternetConnectionApi - functional programming interface
 * @export
 */
export const InternetConnectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternetConnectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read the current internet connection settings
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInternetConnectionSettings(_default?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInternetConnectionSettings(_default, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InternetConnectionApi - factory interface
 * @export
 */
export const InternetConnectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternetConnectionApiFp(configuration)
    return {
        /**
         * 
         * @summary Read the current internet connection settings
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInternetConnectionSettings(_default?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.getInternetConnectionSettings(_default, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InternetConnectionApi - object-oriented interface
 * @export
 * @class InternetConnectionApi
 * @extends {BaseAPI}
 */
export class InternetConnectionApi extends BaseAPI {
    /**
     * 
     * @summary Read the current internet connection settings
     * @param {boolean} [_default] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternetConnectionApi
     */
    public getInternetConnectionSettings(_default?: boolean, options?: any) {
        return InternetConnectionApiFp(this.configuration).getInternetConnectionSettings(_default, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubscriberDevicesApi - axios parameter creator
 * @export
 */
export const SubscriberDevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the list of subscriber devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriberDevices: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriberDevices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the list of subscriber devices
         * @param {boolean} [reset] 
         * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySubscriberDevices: async (reset?: boolean, subscriberDeviceList?: SubscriberDeviceList, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriberDevices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reset !== undefined) {
                localVarQueryParameter['reset'] = reset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberDeviceList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriberDevicesApi - functional programming interface
 * @export
 */
export const SubscriberDevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriberDevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the list of subscriber devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriberDevices(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriberDeviceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriberDevices(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the list of subscriber devices
         * @param {boolean} [reset] 
         * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifySubscriberDevices(reset?: boolean, subscriberDeviceList?: SubscriberDeviceList, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriberDeviceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifySubscriberDevices(reset, subscriberDeviceList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriberDevicesApi - factory interface
 * @export
 */
export const SubscriberDevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriberDevicesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the list of subscriber devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriberDevices(options?: any): AxiosPromise<SubscriberDeviceList> {
            return localVarFp.getSubscriberDevices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the list of subscriber devices
         * @param {boolean} [reset] 
         * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifySubscriberDevices(reset?: boolean, subscriberDeviceList?: SubscriberDeviceList, options?: any): AxiosPromise<SubscriberDeviceList> {
            return localVarFp.modifySubscriberDevices(reset, subscriberDeviceList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriberDevicesApi - object-oriented interface
 * @export
 * @class SubscriberDevicesApi
 * @extends {BaseAPI}
 */
export class SubscriberDevicesApi extends BaseAPI {
    /**
     * 
     * @summary Get the list of subscriber devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberDevicesApi
     */
    public getSubscriberDevices(options?: any) {
        return SubscriberDevicesApiFp(this.configuration).getSubscriberDevices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the list of subscriber devices
     * @param {boolean} [reset] 
     * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberDevicesApi
     */
    public modifySubscriberDevices(reset?: boolean, subscriberDeviceList?: SubscriberDeviceList, options?: any) {
        return SubscriberDevicesApiFp(this.configuration).modifySubscriberDevices(reset, subscriberDeviceList, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WiFiApi - axios parameter creator
 * @export
 */
export const WiFiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the list of defined WiFI networks
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWifiNetworks: async (_default?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wifiNetworks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (_default !== undefined) {
                localVarQueryParameter['default'] = _default;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the list of WiFi networks
         * @param {boolean} [reset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWiFiNetworks: async (reset?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wifiNetworks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reset !== undefined) {
                localVarQueryParameter['reset'] = reset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WiFiApi - functional programming interface
 * @export
 */
export const WiFiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WiFiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the list of defined WiFI networks
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWifiNetworks(_default?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WifiNetwork>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWifiNetworks(_default, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the list of WiFi networks
         * @param {boolean} [reset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWiFiNetworks(reset?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WifiNetwork>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWiFiNetworks(reset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WiFiApi - factory interface
 * @export
 */
export const WiFiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WiFiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the list of defined WiFI networks
         * @param {boolean} [_default] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWifiNetworks(_default?: boolean, options?: any): AxiosPromise<Array<WifiNetwork>> {
            return localVarFp.getWifiNetworks(_default, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the list of WiFi networks
         * @param {boolean} [reset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWiFiNetworks(reset?: boolean, options?: any): AxiosPromise<Array<WifiNetwork>> {
            return localVarFp.modifyWiFiNetworks(reset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WiFiApi - object-oriented interface
 * @export
 * @class WiFiApi
 * @extends {BaseAPI}
 */
export class WiFiApi extends BaseAPI {
    /**
     * 
     * @summary Get the list of defined WiFI networks
     * @param {boolean} [_default] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiFiApi
     */
    public getWifiNetworks(_default?: boolean, options?: any) {
        return WiFiApiFp(this.configuration).getWifiNetworks(_default, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the list of WiFi networks
     * @param {boolean} [reset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiFiApi
     */
    public modifyWiFiNetworks(reset?: boolean, options?: any) {
        return WiFiApiFp(this.configuration).modifyWiFiNetworks(reset, options).then((request) => request(this.axios, this.basePath));
    }
}


