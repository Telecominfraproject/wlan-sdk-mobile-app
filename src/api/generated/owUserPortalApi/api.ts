/* tslint:disable */
/* eslint-disable */
/**
 * OpenWiFi User Portal
 * API describing User Self Care interaction with OpenWifi.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AccessPoint
 */
export interface AccessPoint {
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  macAddress?: string;
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AccessPoint
   */
  id?: string;
  /**
   *
   * @type {Location}
   * @memberof AccessPoint
   */
  address?: Location;
}
/**
 *
 * @export
 * @interface AccessPointList
 */
export interface AccessPointList {
  /**
   *
   * @type {Array<AccessPoint>}
   * @memberof AccessPointList
   */
  list?: Array<AccessPoint>;
}
/**
 *
 * @export
 * @interface AccessTime
 */
export interface AccessTime {
  /**
   *
   * @type {string}
   * @memberof AccessTime
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof AccessTime
   */
  day?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof AccessTime
   */
  rangeList?: Array<string>;
}
/**
 *
 * @export
 * @interface AccessTimes
 */
export interface AccessTimes {
  /**
   *
   * @type {string}
   * @memberof AccessTimes
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof AccessTimes
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof AccessTimes
   */
  modified?: number;
  /**
   *
   * @type {Array<AccessTime>}
   * @memberof AccessTimes
   */
  schedule?: Array<AccessTime>;
}
/**
 *
 * @export
 * @interface Association
 */
export interface Association {
  /**
   *
   * @type {string}
   * @memberof Association
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Association
   */
  ssid?: string;
  /**
   *
   * @type {string}
   * @memberof Association
   */
  macAddress?: string;
  /**
   *
   * @type {number}
   * @memberof Association
   */
  rssi?: number;
  /**
   *
   * @type {number}
   * @memberof Association
   */
  power?: number;
  /**
   *
   * @type {string}
   * @memberof Association
   */
  ipv4?: string;
  /**
   *
   * @type {number}
   * @memberof Association
   */
  ipv6?: number;
  /**
   *
   * @type {number}
   * @memberof Association
   */
  tx?: number;
  /**
   *
   * @type {number}
   * @memberof Association
   */
  rx?: number;
}
/**
 *
 * @export
 * @interface AssociationList
 */
export interface AssociationList {
  /**
   *
   * @type {number}
   * @memberof AssociationList
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof AssociationList
   */
  modified?: number;
  /**
   *
   * @type {Array<Association>}
   * @memberof AssociationList
   */
  associations?: Array<Association>;
}
/**
 *
 * @export
 * @interface Client
 */
export interface Client {
  /**
   *
   * @type {string}
   * @memberof Client
   */
  macAddress?: string;
  /**
   *
   * @type {string}
   * @memberof Client
   */
  speed?: string;
  /**
   *
   * @type {string}
   * @memberof Client
   */
  mode?: string;
  /**
   *
   * @type {string}
   * @memberof Client
   */
  ipv4?: string;
  /**
   *
   * @type {number}
   * @memberof Client
   */
  ipv6?: number;
  /**
   *
   * @type {number}
   * @memberof Client
   */
  tx?: number;
  /**
   *
   * @type {number}
   * @memberof Client
   */
  rx?: number;
}
/**
 *
 * @export
 * @interface ClientList
 */
export interface ClientList {
  /**
   *
   * @type {number}
   * @memberof ClientList
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof ClientList
   */
  modified?: number;
  /**
   *
   * @type {Array<Client>}
   * @memberof ClientList
   */
  clients?: Array<Client>;
}
/**
 *
 * @export
 * @interface DnsConfiguration
 */
export interface DnsConfiguration {
  /**
   *
   * @type {boolean}
   * @memberof DnsConfiguration
   */
  ISP?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DnsConfiguration
   */
  custom?: boolean;
  /**
   *
   * @type {string}
   * @memberof DnsConfiguration
   */
  primary?: string;
  /**
   *
   * @type {string}
   * @memberof DnsConfiguration
   */
  seconfary?: string;
}
/**
 *
 * @export
 * @interface HomeDeviceMode
 */
export interface HomeDeviceMode {
  /**
   *
   * @type {string}
   * @memberof HomeDeviceMode
   */
  type?: HomeDeviceModeTypeEnum;
  /**
   *
   * @type {boolean}
   * @memberof HomeDeviceMode
   */
  enableLEDS?: boolean;
  /**
   *
   * @type {string}
   * @memberof HomeDeviceMode
   */
  subnet?: string;
  /**
   *
   * @type {string}
   * @memberof HomeDeviceMode
   */
  subnetMask?: string;
  /**
   *
   * @type {string}
   * @memberof HomeDeviceMode
   */
  startIP?: string;
  /**
   *
   * @type {string}
   * @memberof HomeDeviceMode
   */
  endIP?: string;
  /**
   *
   * @type {number}
   * @memberof HomeDeviceMode
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof HomeDeviceMode
   */
  modified?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum HomeDeviceModeTypeEnum {
  Bridge = 'bridge',
  Manual = 'manual',
  Automatic = 'automatic',
}

/**
 *
 * @export
 * @interface IPReservation
 */
export interface IPReservation {
  /**
   *
   * @type {string}
   * @memberof IPReservation
   */
  nickname?: string;
  /**
   *
   * @type {string}
   * @memberof IPReservation
   */
  ipAddress?: string;
  /**
   *
   * @type {string}
   * @memberof IPReservation
   */
  macAddress?: string;
}
/**
 *
 * @export
 * @interface IPReservationList
 */
export interface IPReservationList {
  /**
   *
   * @type {number}
   * @memberof IPReservationList
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof IPReservationList
   */
  modified?: number;
  /**
   *
   * @type {Array<IPReservation>}
   * @memberof IPReservationList
   */
  reservations?: Array<IPReservation>;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  error?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponse200
   */
  errorCode?: number;
}
/**
 *
 * @export
 * @interface InternetConnection
 */
export interface InternetConnection {
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  type?: InternetConnectionTypeEnum;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  ipAddress?: string;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  subnetMask?: string;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  defaultGateway?: string;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  primaryDns?: string;
  /**
   *
   * @type {string}
   * @memberof InternetConnection
   */
  secondaryDns?: string;
  /**
   *
   * @type {number}
   * @memberof InternetConnection
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof InternetConnection
   */
  modified?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum InternetConnectionTypeEnum {
  Manual = 'manual',
  Pppoe = 'pppoe',
  Automatic = 'automatic',
}

/**
 *
 * @export
 * @interface Location
 */
export interface Location {
  /**
   *
   * @type {string}
   * @memberof Location
   */
  buildingName?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Location
   */
  addressLines?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Location
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof Location
   */
  state?: string;
  /**
   *
   * @type {string}
   * @memberof Location
   */
  postal?: string;
  /**
   *
   * @type {string}
   * @memberof Location
   */
  country?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Location
   */
  phones?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Location
   */
  mobiles?: Array<string>;
}
/**
 *
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
  /**
   *
   * @type {string}
   * @memberof PasswordChange
   */
  oldPassword?: string;
  /**
   *
   * @type {string}
   * @memberof PasswordChange
   */
  newPassword?: string;
}
/**
 *
 * @export
 * @interface PasswordCreation
 */
export interface PasswordCreation {
  /**
   *
   * @type {string}
   * @memberof PasswordCreation
   */
  newPassword?: string;
}
/**
 *
 * @export
 * @interface SubscriberDevice
 */
export interface SubscriberDevice {
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  macAddress?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  manufacturer?: string;
  /**
   *
   * @type {number}
   * @memberof SubscriberDevice
   */
  firstContact?: number;
  /**
   *
   * @type {number}
   * @memberof SubscriberDevice
   */
  lastContact?: number;
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  group?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  icon?: string;
  /**
   *
   * @type {boolean}
   * @memberof SubscriberDevice
   */
  suspended?: boolean;
  /**
   *
   * @type {string}
   * @memberof SubscriberDevice
   */
  ip?: string;
  /**
   *
   * @type {number}
   * @memberof SubscriberDevice
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof SubscriberDevice
   */
  modified?: number;
  /**
   *
   * @type {AccessTimes}
   * @memberof SubscriberDevice
   */
  schedule?: AccessTimes;
}
/**
 *
 * @export
 * @interface SubscriberDeviceList
 */
export interface SubscriberDeviceList {
  /**
   *
   * @type {number}
   * @memberof SubscriberDeviceList
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof SubscriberDeviceList
   */
  modified?: number;
  /**
   *
   * @type {Array<SubscriberDevice>}
   * @memberof SubscriberDeviceList
   */
  devices?: Array<SubscriberDevice>;
}
/**
 *
 * @export
 * @interface SubscriberInfo
 */
export interface SubscriberInfo {
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  initials?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof SubscriberInfo
   */
  secondaryEmail?: string;
  /**
   *
   * @type {AccessPointList}
   * @memberof SubscriberInfo
   */
  accessPoints?: AccessPointList;
  /**
   *
   * @type {Location}
   * @memberof SubscriberInfo
   */
  serviceAddress?: Location;
  /**
   *
   * @type {Location}
   * @memberof SubscriberInfo
   */
  billingAddress?: Location;
  /**
   *
   * @type {number}
   * @memberof SubscriberInfo
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof SubscriberInfo
   */
  modified?: number;
}
/**
 *
 * @export
 * @interface WifiNetwork
 */
export interface WifiNetwork {
  /**
   *
   * @type {string}
   * @memberof WifiNetwork
   */
  type?: WifiNetworkTypeEnum;
  /**
   *
   * @type {string}
   * @memberof WifiNetwork
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof WifiNetwork
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof WifiNetwork
   */
  encryption?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof WifiNetwork
   */
  bands?: Array<WifiNetworkBandsEnum>;
}

/**
 * @export
 * @enum {string}
 */
export enum WifiNetworkTypeEnum {
  Main = 'main',
  Guest = 'guest',
}
/**
 * @export
 * @enum {string}
 */
export enum WifiNetworkBandsEnum {
  _2G = '2G',
  _5G = '5G',
  _5Gl = '5GL',
  _5Gu = '5GU',
  _6G = '6G',
}

/**
 *
 * @export
 * @interface WifiNetworkList
 */
export interface WifiNetworkList {
  /**
   *
   * @type {number}
   * @memberof WifiNetworkList
   */
  created?: number;
  /**
   *
   * @type {number}
   * @memberof WifiNetworkList
   */
  modified?: number;
  /**
   *
   * @type {Array<WifiNetwork>}
   * @memberof WifiNetworkList
   */
  networks?: Array<WifiNetwork>;
}

/**
 * AccessPointsApi - axios parameter creator
 * @export
 */
export const AccessPointsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add/register a new device for a subscriber
     * @param {AccessPoint} [accessPoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriberAccessPoint: async (accessPoint?: AccessPoint, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/accessPoints`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(accessPoint, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete an access point that is no longer in use.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriberAccessPoint: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('deleteSubscriberAccessPoint', 'deviceId', deviceId);
      const localVarPath = `/accessPoints`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve information about user devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriberAccessPointList: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/accessPoints`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Modify an existing device for a subscriber
     * @param {AccessPoint} [accessPoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriberAccessPoint: async (accessPoint?: AccessPoint, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/accessPoints`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(accessPoint, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccessPointsApi - functional programming interface
 * @export
 */
export const AccessPointsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccessPointsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add/register a new device for a subscriber
     * @param {AccessPoint} [accessPoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSubscriberAccessPoint(
      accessPoint?: AccessPoint,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addSubscriberAccessPoint(accessPoint, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete an access point that is no longer in use.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSubscriberAccessPoint(
      deviceId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubscriberAccessPoint(deviceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve information about user devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubscriberAccessPointList(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriberAccessPointList(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Modify an existing device for a subscriber
     * @param {AccessPoint} [accessPoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifySubscriberAccessPoint(
      accessPoint?: AccessPoint,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modifySubscriberAccessPoint(accessPoint, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AccessPointsApi - factory interface
 * @export
 */
export const AccessPointsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AccessPointsApiFp(configuration);
  return {
    /**
     *
     * @summary Add/register a new device for a subscriber
     * @param {AccessPoint} [accessPoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriberAccessPoint(accessPoint?: AccessPoint, options?: any): AxiosPromise<void> {
      return localVarFp.addSubscriberAccessPoint(accessPoint, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Delete an access point that is no longer in use.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriberAccessPoint(deviceId: string, options?: any): AxiosPromise<object> {
      return localVarFp.deleteSubscriberAccessPoint(deviceId, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve information about user devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriberAccessPointList(options?: any): AxiosPromise<void> {
      return localVarFp.getSubscriberAccessPointList(options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Modify an existing device for a subscriber
     * @param {AccessPoint} [accessPoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriberAccessPoint(accessPoint?: AccessPoint, options?: any): AxiosPromise<void> {
      return localVarFp.modifySubscriberAccessPoint(accessPoint, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * AccessPointsApi - object-oriented interface
 * @export
 * @class AccessPointsApi
 * @extends {BaseAPI}
 */
export class AccessPointsApi extends BaseAPI {
  /**
   *
   * @summary Add/register a new device for a subscriber
   * @param {AccessPoint} [accessPoint]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessPointsApi
   */
  public addSubscriberAccessPoint(accessPoint?: AccessPoint, options?: any) {
    return AccessPointsApiFp(this.configuration)
      .addSubscriberAccessPoint(accessPoint, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete an access point that is no longer in use.
   * @param {string} deviceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessPointsApi
   */
  public deleteSubscriberAccessPoint(deviceId: string, options?: any) {
    return AccessPointsApiFp(this.configuration)
      .deleteSubscriberAccessPoint(deviceId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve information about user devices
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessPointsApi
   */
  public getSubscriberAccessPointList(options?: any) {
    return AccessPointsApiFp(this.configuration)
      .getSubscriberAccessPointList(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Modify an existing device for a subscriber
   * @param {AccessPoint} [accessPoint]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessPointsApi
   */
  public modifySubscriberAccessPoint(accessPoint?: AccessPoint, options?: any) {
    return AccessPointsApiFp(this.configuration)
      .modifySubscriberAccessPoint(accessPoint, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * AccessProcessApi - axios parameter creator
 * @export
 */
export const AccessProcessApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary User is requesting a signup for a new user ID
     * @param {'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword'} action
     * @param {string} email
     * @param {string} [id]
     * @param {PasswordChange | PasswordCreation} [passwordChangePasswordCreation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSignUp: async (
      action: 'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword',
      email: string,
      id?: string,
      passwordChangePasswordCreation?: PasswordChange | PasswordCreation,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'action' is not null or undefined
      assertParamExists('userSignUp', 'action', action);
      // verify required parameter 'email' is not null or undefined
      assertParamExists('userSignUp', 'email', email);
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (action !== undefined) {
        localVarQueryParameter['action'] = action;
      }

      if (email !== undefined) {
        localVarQueryParameter['email'] = email;
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordChangePasswordCreation,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccessProcessApi - functional programming interface
 * @export
 */
export const AccessProcessApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccessProcessApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary User is requesting a signup for a new user ID
     * @param {'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword'} action
     * @param {string} email
     * @param {string} [id]
     * @param {PasswordChange | PasswordCreation} [passwordChangePasswordCreation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userSignUp(
      action: 'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword',
      email: string,
      id?: string,
      passwordChangePasswordCreation?: PasswordChange | PasswordCreation,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userSignUp(
        action,
        email,
        id,
        passwordChangePasswordCreation,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AccessProcessApi - factory interface
 * @export
 */
export const AccessProcessApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AccessProcessApiFp(configuration);
  return {
    /**
     *
     * @summary User is requesting a signup for a new user ID
     * @param {'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword'} action
     * @param {string} email
     * @param {string} [id]
     * @param {PasswordChange | PasswordCreation} [passwordChangePasswordCreation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSignUp(
      action: 'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword',
      email: string,
      id?: string,
      passwordChangePasswordCreation?: PasswordChange | PasswordCreation,
      options?: any,
    ): AxiosPromise<InlineResponse200> {
      return localVarFp
        .userSignUp(action, email, id, passwordChangePasswordCreation, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * AccessProcessApi - object-oriented interface
 * @export
 * @class AccessProcessApi
 * @extends {BaseAPI}
 */
export class AccessProcessApi extends BaseAPI {
  /**
   *
   * @summary User is requesting a signup for a new user ID
   * @param {'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword'} action
   * @param {string} email
   * @param {string} [id]
   * @param {PasswordChange | PasswordCreation} [passwordChangePasswordCreation]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessProcessApi
   */
  public userSignUp(
    action: 'signUp' | 'verifyEmail' | 'forgotPassword' | 'setpassword',
    email: string,
    id?: string,
    passwordChangePasswordCreation?: PasswordChange | PasswordCreation,
    options?: any,
  ) {
    return AccessProcessApiFp(this.configuration)
      .userSignUp(action, email, id, passwordChangePasswordCreation, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the list of wired clients
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWiredClients: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getWiredClients', 'deviceId', deviceId);
      const localVarPath = `/wiredClients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get the list of wired clients
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWiredClients(
      deviceId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWiredClients(deviceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ClientsApiFp(configuration);
  return {
    /**
     *
     * @summary Get the list of wired clients
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWiredClients(deviceId: string, options?: any): AxiosPromise<ClientList> {
      return localVarFp.getWiredClients(deviceId, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
  /**
   *
   * @summary Get the list of wired clients
   * @param {string} deviceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientsApi
   */
  public getWiredClients(deviceId: string, options?: any) {
    return ClientsApiFp(this.configuration)
      .getWiredClients(deviceId, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * DeviceModeApi - axios parameter creator
 * @export
 */
export const DeviceModeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Read the Home Device Mode
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHomeDeviceMode: async (deviceId: string, _default?: boolean, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getHomeDeviceMode', 'deviceId', deviceId);
      const localVarPath = `/homeDeviceMode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (_default !== undefined) {
        localVarQueryParameter['default'] = _default;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Modify the current device mode settings
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyHomeDeviceMode: async (
      deviceId: string,
      reset?: boolean,
      homeDeviceMode?: HomeDeviceMode,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('modifyHomeDeviceMode', 'deviceId', deviceId);
      const localVarPath = `/homeDeviceMode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (reset !== undefined) {
        localVarQueryParameter['reset'] = reset;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(homeDeviceMode, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DeviceModeApi - functional programming interface
 * @export
 */
export const DeviceModeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeviceModeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Read the Home Device Mode
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHomeDeviceMode(
      deviceId: string,
      _default?: boolean,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeDeviceMode(deviceId, _default, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Modify the current device mode settings
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifyHomeDeviceMode(
      deviceId: string,
      reset?: boolean,
      homeDeviceMode?: HomeDeviceMode,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modifyHomeDeviceMode(
        deviceId,
        reset,
        homeDeviceMode,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DeviceModeApi - factory interface
 * @export
 */
export const DeviceModeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DeviceModeApiFp(configuration);
  return {
    /**
     *
     * @summary Read the Home Device Mode
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHomeDeviceMode(deviceId: string, _default?: boolean, options?: any): AxiosPromise<void> {
      return localVarFp.getHomeDeviceMode(deviceId, _default, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Modify the current device mode settings
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyHomeDeviceMode(
      deviceId: string,
      reset?: boolean,
      homeDeviceMode?: HomeDeviceMode,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .modifyHomeDeviceMode(deviceId, reset, homeDeviceMode, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * DeviceModeApi - object-oriented interface
 * @export
 * @class DeviceModeApi
 * @extends {BaseAPI}
 */
export class DeviceModeApi extends BaseAPI {
  /**
   *
   * @summary Read the Home Device Mode
   * @param {string} deviceId
   * @param {boolean} [_default]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceModeApi
   */
  public getHomeDeviceMode(deviceId: string, _default?: boolean, options?: any) {
    return DeviceModeApiFp(this.configuration)
      .getHomeDeviceMode(deviceId, _default, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Modify the current device mode settings
   * @param {string} deviceId
   * @param {boolean} [reset]
   * @param {HomeDeviceMode} [homeDeviceMode] Information used to modify the current device mode settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceModeApi
   */
  public modifyHomeDeviceMode(deviceId: string, reset?: boolean, homeDeviceMode?: HomeDeviceMode, options?: any) {
    return DeviceModeApiFp(this.configuration)
      .modifyHomeDeviceMode(deviceId, reset, homeDeviceMode, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * IPReservationsApi - axios parameter creator
 * @export
 */
export const IPReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add A new IP reservation
     * @param {string} deviceId
     * @param {boolean} [replace]
     * @param {IPReservationList} [iPReservationList] List of IP reservations to maintain for this device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addIPReservation: async (
      deviceId: string,
      replace?: boolean,
      iPReservationList?: IPReservationList,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('addIPReservation', 'deviceId', deviceId);
      const localVarPath = `/ipReservations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (replace !== undefined) {
        localVarQueryParameter['replace'] = replace;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(iPReservationList, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete an IP Reservation
     * @param {string} deviceId
     * @param {string} [macAddress]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIPReservation: async (
      deviceId: string,
      macAddress?: string,
      name?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('deleteIPReservation', 'deviceId', deviceId);
      const localVarPath = `/ipReservations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (macAddress !== undefined) {
        localVarQueryParameter['macAddress'] = macAddress;
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retreive the list of IP Reservations
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIPReservationList: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getIPReservationList', 'deviceId', deviceId);
      const localVarPath = `/ipReservations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * IPReservationsApi - functional programming interface
 * @export
 */
export const IPReservationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IPReservationsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add A new IP reservation
     * @param {string} deviceId
     * @param {boolean} [replace]
     * @param {IPReservationList} [iPReservationList] List of IP reservations to maintain for this device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addIPReservation(
      deviceId: string,
      replace?: boolean,
      iPReservationList?: IPReservationList,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPReservationList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addIPReservation(
        deviceId,
        replace,
        iPReservationList,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete an IP Reservation
     * @param {string} deviceId
     * @param {string} [macAddress]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteIPReservation(
      deviceId: string,
      macAddress?: string,
      name?: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIPReservation(
        deviceId,
        macAddress,
        name,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retreive the list of IP Reservations
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIPReservationList(
      deviceId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPReservationList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getIPReservationList(deviceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * IPReservationsApi - factory interface
 * @export
 */
export const IPReservationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IPReservationsApiFp(configuration);
  return {
    /**
     *
     * @summary Add A new IP reservation
     * @param {string} deviceId
     * @param {boolean} [replace]
     * @param {IPReservationList} [iPReservationList] List of IP reservations to maintain for this device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addIPReservation(
      deviceId: string,
      replace?: boolean,
      iPReservationList?: IPReservationList,
      options?: any,
    ): AxiosPromise<IPReservationList> {
      return localVarFp
        .addIPReservation(deviceId, replace, iPReservationList, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Delete an IP Reservation
     * @param {string} deviceId
     * @param {string} [macAddress]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIPReservation(deviceId: string, macAddress?: string, name?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .deleteIPReservation(deviceId, macAddress, name, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Retreive the list of IP Reservations
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIPReservationList(deviceId: string, options?: any): AxiosPromise<IPReservationList> {
      return localVarFp.getIPReservationList(deviceId, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * IPReservationsApi - object-oriented interface
 * @export
 * @class IPReservationsApi
 * @extends {BaseAPI}
 */
export class IPReservationsApi extends BaseAPI {
  /**
   *
   * @summary Add A new IP reservation
   * @param {string} deviceId
   * @param {boolean} [replace]
   * @param {IPReservationList} [iPReservationList] List of IP reservations to maintain for this device.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IPReservationsApi
   */
  public addIPReservation(deviceId: string, replace?: boolean, iPReservationList?: IPReservationList, options?: any) {
    return IPReservationsApiFp(this.configuration)
      .addIPReservation(deviceId, replace, iPReservationList, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete an IP Reservation
   * @param {string} deviceId
   * @param {string} [macAddress]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IPReservationsApi
   */
  public deleteIPReservation(deviceId: string, macAddress?: string, name?: string, options?: any) {
    return IPReservationsApiFp(this.configuration)
      .deleteIPReservation(deviceId, macAddress, name, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retreive the list of IP Reservations
   * @param {string} deviceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IPReservationsApi
   */
  public getIPReservationList(deviceId: string, options?: any) {
    return IPReservationsApiFp(this.configuration)
      .getIPReservationList(deviceId, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * InternetConnectionApi - axios parameter creator
 * @export
 */
export const InternetConnectionApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Read the current internet connection settings
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternetConnectionSettings: async (
      deviceId: string,
      _default?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getInternetConnectionSettings', 'deviceId', deviceId);
      const localVarPath = `/internetConnection`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (_default !== undefined) {
        localVarQueryParameter['default'] = _default;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Modify the current internet connection settings
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInternetConnectionSettings: async (
      deviceId: string,
      reset?: boolean,
      internetConnection?: InternetConnection,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('modifyInternetConnectionSettings', 'deviceId', deviceId);
      const localVarPath = `/internetConnection`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (reset !== undefined) {
        localVarQueryParameter['reset'] = reset;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(internetConnection, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InternetConnectionApi - functional programming interface
 * @export
 */
export const InternetConnectionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InternetConnectionApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Read the current internet connection settings
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInternetConnectionSettings(
      deviceId: string,
      _default?: boolean,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInternetConnectionSettings(
        deviceId,
        _default,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Modify the current internet connection settings
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifyInternetConnectionSettings(
      deviceId: string,
      reset?: boolean,
      internetConnection?: InternetConnection,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modifyInternetConnectionSettings(
        deviceId,
        reset,
        internetConnection,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * InternetConnectionApi - factory interface
 * @export
 */
export const InternetConnectionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = InternetConnectionApiFp(configuration);
  return {
    /**
     *
     * @summary Read the current internet connection settings
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInternetConnectionSettings(deviceId: string, _default?: boolean, options?: any): AxiosPromise<void> {
      return localVarFp
        .getInternetConnectionSettings(deviceId, _default, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Modify the current internet connection settings
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInternetConnectionSettings(
      deviceId: string,
      reset?: boolean,
      internetConnection?: InternetConnection,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .modifyInternetConnectionSettings(deviceId, reset, internetConnection, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * InternetConnectionApi - object-oriented interface
 * @export
 * @class InternetConnectionApi
 * @extends {BaseAPI}
 */
export class InternetConnectionApi extends BaseAPI {
  /**
   *
   * @summary Read the current internet connection settings
   * @param {string} deviceId
   * @param {boolean} [_default]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InternetConnectionApi
   */
  public getInternetConnectionSettings(deviceId: string, _default?: boolean, options?: any) {
    return InternetConnectionApiFp(this.configuration)
      .getInternetConnectionSettings(deviceId, _default, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Modify the current internet connection settings
   * @param {string} deviceId
   * @param {boolean} [reset]
   * @param {InternetConnection} [internetConnection] Information used to modify the current internet connection settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InternetConnectionApi
   */
  public modifyInternetConnectionSettings(
    deviceId: string,
    reset?: boolean,
    internetConnection?: InternetConnection,
    options?: any,
  ) {
    return InternetConnectionApiFp(this.configuration)
      .modifyInternetConnectionSettings(deviceId, reset, internetConnection, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * SubscriberDevicesApi - axios parameter creator
 * @export
 */
export const SubscriberDevicesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the list of subscriber devices
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriberDevices: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getSubscriberDevices', 'deviceId', deviceId);
      const localVarPath = `/subscriberDevices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the list of subscriber devices
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriberDevices: async (
      deviceId: string,
      reset?: boolean,
      subscriberDeviceList?: SubscriberDeviceList,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('modifySubscriberDevices', 'deviceId', deviceId);
      const localVarPath = `/subscriberDevices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (reset !== undefined) {
        localVarQueryParameter['reset'] = reset;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(subscriberDeviceList, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SubscriberDevicesApi - functional programming interface
 * @export
 */
export const SubscriberDevicesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SubscriberDevicesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get the list of subscriber devices
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubscriberDevices(
      deviceId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriberDeviceList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriberDevices(deviceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update the list of subscriber devices
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifySubscriberDevices(
      deviceId: string,
      reset?: boolean,
      subscriberDeviceList?: SubscriberDeviceList,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriberDeviceList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modifySubscriberDevices(
        deviceId,
        reset,
        subscriberDeviceList,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * SubscriberDevicesApi - factory interface
 * @export
 */
export const SubscriberDevicesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SubscriberDevicesApiFp(configuration);
  return {
    /**
     *
     * @summary Get the list of subscriber devices
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriberDevices(deviceId: string, options?: any): AxiosPromise<SubscriberDeviceList> {
      return localVarFp.getSubscriberDevices(deviceId, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Update the list of subscriber devices
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriberDevices(
      deviceId: string,
      reset?: boolean,
      subscriberDeviceList?: SubscriberDeviceList,
      options?: any,
    ): AxiosPromise<SubscriberDeviceList> {
      return localVarFp
        .modifySubscriberDevices(deviceId, reset, subscriberDeviceList, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * SubscriberDevicesApi - object-oriented interface
 * @export
 * @class SubscriberDevicesApi
 * @extends {BaseAPI}
 */
export class SubscriberDevicesApi extends BaseAPI {
  /**
   *
   * @summary Get the list of subscriber devices
   * @param {string} deviceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriberDevicesApi
   */
  public getSubscriberDevices(deviceId: string, options?: any) {
    return SubscriberDevicesApiFp(this.configuration)
      .getSubscriberDevices(deviceId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the list of subscriber devices
   * @param {string} deviceId
   * @param {boolean} [reset]
   * @param {SubscriberDeviceList} [subscriberDeviceList] List of devices
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriberDevicesApi
   */
  public modifySubscriberDevices(
    deviceId: string,
    reset?: boolean,
    subscriberDeviceList?: SubscriberDeviceList,
    options?: any,
  ) {
    return SubscriberDevicesApiFp(this.configuration)
      .modifySubscriberDevices(deviceId, reset, subscriberDeviceList, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * SubscriberInformationApi - axios parameter creator
 * @export
 */
export const SubscriberInformationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the information about the subscriber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriberInfo: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/subscriber`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Modify the information stored about the subscriber
     * @param {SubscriberInfo} [subscriberInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriberInfo: async (subscriberInfo?: SubscriberInfo, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/subscriber`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(subscriberInfo, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SubscriberInformationApi - functional programming interface
 * @export
 */
export const SubscriberInformationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SubscriberInformationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get the information about the subscriber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubscriberInfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriberInfo(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Modify the information stored about the subscriber
     * @param {SubscriberInfo} [subscriberInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifySubscriberInfo(
      subscriberInfo?: SubscriberInfo,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modifySubscriberInfo(subscriberInfo, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * SubscriberInformationApi - factory interface
 * @export
 */
export const SubscriberInformationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SubscriberInformationApiFp(configuration);
  return {
    /**
     *
     * @summary Get the information about the subscriber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriberInfo(options?: any): AxiosPromise<void> {
      return localVarFp.getSubscriberInfo(options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Modify the information stored about the subscriber
     * @param {SubscriberInfo} [subscriberInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriberInfo(subscriberInfo?: SubscriberInfo, options?: any): AxiosPromise<void> {
      return localVarFp.modifySubscriberInfo(subscriberInfo, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * SubscriberInformationApi - object-oriented interface
 * @export
 * @class SubscriberInformationApi
 * @extends {BaseAPI}
 */
export class SubscriberInformationApi extends BaseAPI {
  /**
   *
   * @summary Get the information about the subscriber
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriberInformationApi
   */
  public getSubscriberInfo(options?: any) {
    return SubscriberInformationApiFp(this.configuration)
      .getSubscriberInfo(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Modify the information stored about the subscriber
   * @param {SubscriberInfo} [subscriberInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubscriberInformationApi
   */
  public modifySubscriberInfo(subscriberInfo?: SubscriberInfo, options?: any) {
    return SubscriberInformationApiFp(this.configuration)
      .modifySubscriberInfo(subscriberInfo, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * WiFiClientsApi - axios parameter creator
 * @export
 */
export const WiFiClientsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the list of wired clients
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWifiClients: async (deviceId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getWifiClients', 'deviceId', deviceId);
      const localVarPath = `/wifiClients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WiFiClientsApi - functional programming interface
 * @export
 */
export const WiFiClientsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WiFiClientsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get the list of wired clients
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWifiClients(
      deviceId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWifiClients(deviceId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * WiFiClientsApi - factory interface
 * @export
 */
export const WiFiClientsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WiFiClientsApiFp(configuration);
  return {
    /**
     *
     * @summary Get the list of wired clients
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWifiClients(deviceId: string, options?: any): AxiosPromise<AssociationList> {
      return localVarFp.getWifiClients(deviceId, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * WiFiClientsApi - object-oriented interface
 * @export
 * @class WiFiClientsApi
 * @extends {BaseAPI}
 */
export class WiFiClientsApi extends BaseAPI {
  /**
   *
   * @summary Get the list of wired clients
   * @param {string} deviceId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiFiClientsApi
   */
  public getWifiClients(deviceId: string, options?: any) {
    return WiFiClientsApiFp(this.configuration)
      .getWifiClients(deviceId, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * WiFiNetworksApi - axios parameter creator
 * @export
 */
export const WiFiNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get the list of defined WiFI networks
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWifiNetworks: async (deviceId: string, _default?: boolean, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('getWifiNetworks', 'deviceId', deviceId);
      const localVarPath = `/wifiNetworks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (_default !== undefined) {
        localVarQueryParameter['default'] = _default;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the list of WiFi networks
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyWiFiNetworks: async (deviceId: string, reset?: boolean, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('modifyWiFiNetworks', 'deviceId', deviceId);
      const localVarPath = `/wifiNetworks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, 'X-API-KEY', configuration);

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId;
      }

      if (reset !== undefined) {
        localVarQueryParameter['reset'] = reset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WiFiNetworksApi - functional programming interface
 * @export
 */
export const WiFiNetworksApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WiFiNetworksApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get the list of defined WiFI networks
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWifiNetworks(
      deviceId: string,
      _default?: boolean,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WifiNetwork>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWifiNetworks(deviceId, _default, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update the list of WiFi networks
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modifyWiFiNetworks(
      deviceId: string,
      reset?: boolean,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WifiNetwork>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWiFiNetworks(deviceId, reset, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * WiFiNetworksApi - factory interface
 * @export
 */
export const WiFiNetworksApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WiFiNetworksApiFp(configuration);
  return {
    /**
     *
     * @summary Get the list of defined WiFI networks
     * @param {string} deviceId
     * @param {boolean} [_default]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWifiNetworks(deviceId: string, _default?: boolean, options?: any): AxiosPromise<Array<WifiNetwork>> {
      return localVarFp.getWifiNetworks(deviceId, _default, options).then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Update the list of WiFi networks
     * @param {string} deviceId
     * @param {boolean} [reset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyWiFiNetworks(deviceId: string, reset?: boolean, options?: any): AxiosPromise<Array<WifiNetwork>> {
      return localVarFp.modifyWiFiNetworks(deviceId, reset, options).then(request => request(axios, basePath));
    },
  };
};

/**
 * WiFiNetworksApi - object-oriented interface
 * @export
 * @class WiFiNetworksApi
 * @extends {BaseAPI}
 */
export class WiFiNetworksApi extends BaseAPI {
  /**
   *
   * @summary Get the list of defined WiFI networks
   * @param {string} deviceId
   * @param {boolean} [_default]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiFiNetworksApi
   */
  public getWifiNetworks(deviceId: string, _default?: boolean, options?: any) {
    return WiFiNetworksApiFp(this.configuration)
      .getWifiNetworks(deviceId, _default, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the list of WiFi networks
   * @param {string} deviceId
   * @param {boolean} [reset]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WiFiNetworksApi
   */
  public modifyWiFiNetworks(deviceId: string, reset?: boolean, options?: any) {
    return WiFiNetworksApiFp(this.configuration)
      .modifyWiFiNetworks(deviceId, reset, options)
      .then(request => request(this.axios, this.basePath));
  }
}
